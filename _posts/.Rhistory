mutate(countyName = coalesce(!!! .)) %>%
dplyr::select(countyName, everything())
head(temp)
temp2<-temp2[ ,c("countyName")]
hs22<-cbind(h22,temp2)
hs22<-cbind(hs22,temp2)
fre(hs22$countyName )
library(RCurl) # the data are stored on the net
regions<-download.file(url="https://raw.githubusercontent.com/bac3917/Cauldron/master/Regions_b.csv",
destfile = "C:/temp/regions.csv")
regions<-read.csv('C:/temp/regions.csv')
hs22<-merge(hs22,regions,by="countyName")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
library(readxl);library(tidyverse);library(expss)
hs22 <- read_excel("Z:/EvaluationConsulting/Berks_IU/HeadStart/HS2021-22/data_and_analysis/HSneedsSurvey2022.xlsx")
expss::expss_output_viewer() # send output to viewer
temp<-hs22 %>% dplyr::select(starts_with("c_"))
x<-apply(temp, 1, function(x)  which(nchar(x)>1) )
# x[7] # note, some have multiple counties
x<-colSums(!is.na(temp)) # use this for response map
x<-as.data.frame(x)
colnames(x)[1]<-'numResponses'
x$county<-rownames(x)
x$county<-toupper(substr(x$county,3,22))
# make one column for county
temp2<-temp %>%
mutate_all(as.character) %>%
mutate(countyName = coalesce(!!! .)) %>%
dplyr::select(countyName, everything())
temp2<-temp2[ ,c("countyName")]
#htmlTable(fre(temp2$countyName))
hs22<-cbind(hs22,temp2)
library(RCurl) # the data are stored on the net
regions<-download.file(url="https://raw.githubusercontent.com/bac3917/Cauldron/master/Regions_b.csv",
destfile = "C:/temp/regions.csv")
regions<-read.csv('C:/temp/regions.csv')
hs22<-merge(hs22,regions,by="countyName")
temp<-hs2 %>% tidyr::pivot_longer(cols=c(starts_with('h1')))
temp<-hs22 %>% tidyr::pivot_longer(cols=c(starts_with('h1')))
temp$name<-ifelse(temp$name=="h1a","Hless Shelters",
ifelse(temp$name=="h1b","Domes Viol Shelters",
ifelse(temp$name=="h1c","Subst Abuse Facil",
ifelse(temp$name=="h1d","Local Housing Agen.",
ifelse(temp$name=="h1e","ECYEH",
ifelse(temp$name=="h1f","LEA Liaison",NA))))))
temp$value<-ifelse(temp$value=="Dont Know" |temp$value=="NA",NA,temp$value  )
temp$value<-factor(temp$value, levels=c("One a year or less","A few times a year","About every other month", "Monthly", "More than monthly"),ordered = T)
temp<-temp %>% dplyr::filter(!is.na(value) & !is.na(RegionSimple.x))
ggplot(temp, aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
ggtitle("How Often Works with Orgs to Identify Ch Exper Hless")+
theme_minimal()+
facet_wrap(~RegionSimple.x)
temp<-temp %>% dplyr::filter(!is.na(value) & !is.na(RegionSimple))
ggplot(temp, aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
ggtitle("How Often Works with Orgs to Identify Ch Exper Hless")+
theme_minimal()+
facet_wrap(~RegionSimple.x)
ggplot(temp, aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
ggtitle("How Often Works with Orgs to Identify Ch Exper Hless")+
theme_minimal()+
facet_wrap(~RegionSimple)
ggplot(temp, aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
labs(title="How Often Works with Orgs to Identify Ch Exper Hless",caption=paste0("HS 2022 Needs Asmt. (n=",dim(hs22)[1]," respondents)"))+
theme_minimal()+
facet_wrap(~RegionSimple)
round(mean(as.numeric(hs22$h4),na.rm=TRUE),digits=1)
summary(as.numeric(hs22$h4))
temp %>% dplyr::filter(!is.na(value)) %>% dplyr::filter(!is.na(RegionSimple)) %>%
ggplot(., aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
labs(title="Helpfulness of Orgs to to Pursue Goals @ Hless Issues",caption=paste0("HS 2022 Needs Asmt. (n=",dim(hs22)[1]," respondents)"))+
theme_minimal()+
facet_wrap(~RegionSimple)
bcf()
temp %>% dplyr::filter(!is.na(value)) %>% dplyr::filter(!is.na(RegionSimple)) %>%
ggplot(., aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
labs(title="Helpfulness of Orgs toward Pursue Goals @ Hless Issues",caption=paste0("HS 2022 Needs Asmt. (n=",dim(hs22)[1]," respondents)"))+
theme_minimal()+
facet_wrap(~RegionSimple)
temp$value<-factor(temp$value, levels=c("Not helpful","Slightly helpful","Moderately heplful", "Very helpful"),ordered = T)
temp %>% dplyr::filter(!is.na(value)) %>% dplyr::filter(!is.na(RegionSimple)) %>%
ggplot(., aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
labs(title="Helpfulness of Orgs toward Pursue Goals @ Hless Issues",caption=paste0("HS 2022 Needs Asmt. (n=",dim(hs22)[1]," respondents)"))+
theme_minimal()+
facet_wrap(~RegionSimple)
temp$value<-factor(temp$value, levels=c("Not helpful","Slightly helpful","Moderately heplful", "Very helpful"),ordered = T)
temp %>% dplyr::filter(!is.na(value)) %>% dplyr::filter(!is.na(RegionSimple)) %>%
ggplot(., aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
labs(title="Helpfulness of Orgs toward Pursue Goals @ Hless Issues",caption=paste0("HS 2022 Needs Asmt. (n=",dim(hs22)[1]," respondents)"))+
theme_minimal()+
facet_wrap(~RegionSimple)
temp<-hs2 %>% tidyr::pivot_longer(cols=c(starts_with('h2')))
temp<-hs12 %>%
tidyr::pivot_longer(cols=c(starts_with('h2')))
temp<-hs22 %>%
tidyr::pivot_longer(cols=c(starts_with('h2')))
temp$name<-ifelse(temp$name=="h2a","MV Liaison",
ifelse(temp$name=="h2b","Local Agencies",
ifelse(temp$name=="h2c","Local housing agencies",
ifelse(temp$name=="h2d","Domes. V. Shelters",
ifelse(temp$name=="h2e","Substance Abuse Progs",
ifelse(temp$name=="h2f","ECYEH",NA))))))
temp$value<-ifelse(temp$value=="Don't Know" |temp$value=="NA",NA,temp$value  )
temp$value<-factor(temp$value, levels=c("Not helpful","Slightly helpful","Moderately heplful", "Very helpful"),ordered = T)
temp %>% dplyr::filter(!is.na(value)) %>% dplyr::filter(!is.na(RegionSimple)) %>%
ggplot(., aes(str_wrap(name,18),fill=value)) + geom_bar(position = 'fill')+
scale_fill_colorblind()+ylab("Proportion")+xlab("Partner")+
labs(title="Helpfulness of Orgs toward Pursue Goals @ Hless Issues",caption=paste0("HS 2022 Needs Asmt. (n=",dim(hs22)[1]," respondents)"))+
theme_minimal()+
facet_wrap(~RegionSimple)
summary(as.numeric(hs22$h4))
round(mean(as.numeric(hs22$h4),na.rm=TRUE),digits=1)
round(mean(as.numeric(hs22$h4),na.rm=TRUE),digits=2)
x
temp
library(readxl);library(tidyverse);library(expss)
hs22 <- read_excel("Z:/EvaluationConsulting/Berks_IU/HeadStart/HS2021-22/data_and_analysis/HSneedsSurvey2022.xlsx")
expss::expss_output_viewer() # send output to viewer
temp<-hs22 %>% dplyr::select(starts_with("c_"))
x<-apply(temp, 1, function(x)  which(nchar(x)>1) )
# x[7] # note, some have multiple counties
x<-colSums(!is.na(temp)) # use this for response map
x<-as.data.frame(x)
colnames(x)[1]<-'numResponses'
x$county<-rownames(x)
x$county<-toupper(substr(x$county,3,22))
# make one column for county
temp2<-temp %>%
mutate_all(as.character) %>%
mutate(countyName = coalesce(!!! .)) %>%
dplyr::select(countyName, everything())
hs22<-cbind(hs22,temp2)
library(RCurl) # the data are stored on the net
regions<-download.file(url="https://raw.githubusercontent.com/bac3917/Cauldron/master/Regions_b.csv",
destfile = "C:/temp/regions.csv")
regions<-read.csv('C:/temp/regions.csv')
hs22<-merge(hs22,regions,by="countyName")
fre(hs22$countyName )
fre(hs22$Rtype3_role)
table(hs22$Rtype18)
table(hs22$Rtype7)
table(hs22$Rtype5)
cro(hs22$Rtype5,hs22$Rtype3_role)
hs22$boA<-colMeans(hs22[,c(273:278)])
bcf()
### Final file preparation analysis begins here;
df<-read.csv("Z:/GENERAL/Data/PA_Data/PDE/PubSchoolStaff/paEducStaffRaw.csv")
#  create a counting variable for years in an LEA
df<-df %>%
group_by(PublicID,AUN) %>% unique() %>%
mutate(sequence=as.numeric(row_number()))
# deal with negative signs in publicID values
#are dash prefixes appearing in all years? -> YES
df$PublicID2<-gsub("[^0-9.-]", "", df$PublicID)
df$PublicID2<-gsub("-", "", df$PublicID)
warehouse()
ccdpa$ST_LEAID<-str_replace_all(ccdpa$ST_LEAID,"-","")
ccdpa2<-
ccdpa %>%
dplyr::filter(SURVYEAR=="2020-21") %>%
group_by(ST_LEAID) %>%
summarise(PctFreeLunch=mean(PctFreeLunch,na.rm=T),
NCESSCH=first(NCESSCH),
IU_Group_Cat=first(IU_Group_Cat),
countyName=first(county),
schlevel=first(LEVEL_calculated),
zip=first(MZIP))
# add school info
df<-merge(df,ccdpa2,
by.x="AUN",by.y="ST_LEAID",
all.y=FALSE )  # 40k teachers do not match?
fre(df$PositionRecode)
# this file is sorted by PublicID & year
write.csv(df,"paEducStaffRaw_Sorted_Merge.csv")
library(tidyverse);library(expss)
source("Z:/GENERAL/R/BC_conveniencefuncs.R")
df<-read.csv("Z:/GENERAL/Data/PA_Data/PDE/PubSchoolStaff/paEducStaffRaw_Sorted_Merge.csv")
df<-read.csv("Z:/GENERAL/Data/PA_Data/PDE/PubSchoolStaff/paEducStaff/Raw_Sorted_Merge.csv")
getwd()
df<-read.csv("Z:/GENERAL/Data/PA_Data/PDE/PubSchoolStaff/paEducStaffRaw_Sorted_Merge.csv")
### Final file preparation analysis begins here;
df<-read.csv("Z:/GENERAL/Data/PA_Data/PDE/PubSchoolStaff/paEducStaffRaw.csv")
#  create a counting variable for years in an LEA
df<-df %>%
group_by(PublicID,AUN) %>% unique() %>%
mutate(sequence=as.numeric(row_number()))
# deal with negative signs in publicID values
#are dash prefixes appearing in all years? -> YES
df$PublicID2<-gsub("[^0-9.-]", "", df$PublicID)
df$PublicID2<-gsub("-", "", df$PublicID)
# add school info
df<-merge(df,ccdpa2,
by.x="AUN",by.y="ST_LEAID",
all.y=FALSE )  # 40k teachers do not match?
df <- df %>% arrange(PublicID2,year) # ensure this order is set
# this file is sorted by PublicID & year
write.csv(df,"Z:/GENERAL/Data/PA_Data/PDE/PubSchStaff/paEducStaffRaw_Sorted_Merge.csv")
# this file is sorted by PublicID & year
write.csv(df,"Z:/GENERAL/Data/PA_Data/PDE/PubSchoolStaff/paEducStaffRaw_Sorted_Merge.csv")
f(df$PositionRecode)
f(df$PositionRecode2)
df<-df %>% dplyr::filter(PositionRecode=="Admin")
blogdown:::preview_site()
df$PositionRecode
f(df$PositionRecode)
5286+285
557/5963
5571/5963
bcf()
conn <-odbcConnect("AlternateODBC")
library(DBI);library(dplyr);library(dbplyr)
library(RODBC);library(tidyverse)
conn <-odbcConnect("AlternateODBC")
rm(con)
library(gganimate);library(ggplot2);library(reshape2)
library(RCurl)
ww<-"02-02-2022"  # pick a date
usa<-getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports_us/",ww,".csv"))
usa<-read.csv(text=usa)
colnames(usa)[3]<-'date'
usa$date2<-substr(usa$date,1,10);
usa$date2<-as.Date(usa$date2,format="%Y-%m-%d")
#w2$dweek<-lubridate::week(w2$date3)
head(usa)
usa<-usa %>% filter(!is.na(usa))
usa$dweek<-lubridate::week(usa$date2)
temp<-usa %>%
group_by(Province_State,dweek) %>%
summarise(ncases=sum(Confirmed))
usa<-usa %>% dplyr::filter(!is.na(usa))
#w2$dweek<-lubridate::week(w2$date3)
head(usa)
usa<-usa %>% dplyr::filter(!is.na(usa))
usa$dweek<-lubridate::week(usa$date2)
temp<-usa %>%
group_by(Province_State,dweek) %>%
summarise(ncases=sum(Confirmed))
ggplot(temp, aes(dweek,ncases),
group=Province_State,color=factor(Province_State))+
geom_line()+theme_minimal()
#  transition_states(covseq)+ # the value must be unique! no dups!
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
usa<-w2 %>% filter(nation=="US")
#w2$dweek<-lubridate::week(w2$date3)
head(usa)
fre(usa$Province_State)
knitr::opts_chunk$set(echo = TRUE)
library(openSkies)
library(tidyverse)
ll<-getAirportArrivals(airport="KMDT", startTime="2022-01-29 12:00:00",
endTime="2022-01-30 13:00:00")
ll[2:4]
harea<-getSingleTimeStateVectors(
minLatitude=39.8389, maxLatitude=40.00,
minLongitude=-75.2962, maxLongitude=-77.6,
timeZone = "America/New_York") # harrisburg area
# Obtain the state vector for aircraft with ICAO 24-bit address 403003 for the 8th of October, 2020 at 16:50 London time.
getSingleTimeStateVectors(aircraft="403003", time="2020-10-08 16:50:00",
timeZone="Europe/London")
q<-getSingleTimeStateVectors(aircraft="403003", time="2020-10-08 16:50:00",
timeZone="Europe/London")
str(q)
library(listviewer)
listviewer::jsonedit(q)
q$baro_altitude
q$longitude
q$vertical_rate
# Obtain the state vector for aircraft with ICAO 24-bit address 403003 for the 8th of October, 2020 at 16:50 London time.
q1<-getSingleTimeStateVectors(aircraft="403003", time="2020-10-08 16:50:00",
timeZone="Europe/London")
q2<-getSingleTimeStateVectors(aircraft="403003", time="2020-10-08 16:55:00",
timeZone="Europe/London")
q3<-getSingleTimeStateVectors(aircraft="403003", time="2020-10-08 16:59:00",
timeZone="Europe/London")
alts<-rbind(q1$geo_altitude,q2$geo_altitude,q3$geo_altitude)
plot(alts)
alts
longs<-rbind(q1$longitude,q2$longitude,q3$longitude)
longs
df<-as.data.frame(cbind(alts,longs))
df
# Obtain a time series of state vectors for the aircraft with ICAO 24-bit
# address 403003 for the 8th of October, 2020 between 16:50 and 16:53 (London
# time), with a time resolution of 1 minute.
q<-getAircraftStateVectorsSeries("403003", startTime = "2020-10-08 16:50:00",
endTime = "2020-10-08 16:52:00",
timeZone="Europe/London", timeResolution=60)
plot(q$time_series)
q$time_series
q
View(q)
q$state_vectors[[1]]
q$state_vectors[[1]][[2]]
q2<-q$state_vectors[[1]]
q2$baro_altitude
q$state_vectors[[1]]
q$state_vector
q$state_vectors
q<-q$state_vectors
q
q[[2]]
# Obtain a time series of state vectors for the aircraft with ICAO 24-bit
# address 403003 for the 8th of October, 2020 between 16:50 and 16:53 (London
# time), with a time resolution of 1 minute.
q<-getAircraftStateVectorsSeries("403003",
startTime = "2020-10-08 16:50:00",
endTime = "2020-10-08 16:52:00",
timeZone="Europe/London",
timeResolution=60) # this will return 3 records given start/end time
q
q$state_vectors
q[[1]]
q$state_vectors
q$state_vectors[[2]]
q2<-q$state_vectors[[1]]
q2
vects<-q$state_vectors
vects[[1]]
vects<-tidyr::unlist(q$state_vectors)
vects<-dplyr::unlist(q$state_vectors)
vects?unlist
?unlist
vects<-unlist(q$state_vectors)
?tidyr::unnest
vects<-tidyr::unnest(q$state_vectors)
q$state_vectors
vects<-q$state_vectors
vects
unnest(vects)
q %>% unnest(state_vectors)
vects<-q$state_vectors
vects
vects[[.]]
vects[.]
vects[1]
x<-vects[1]
vects %>% unnest_wider()
vects %>% tidyr::unnest_wider()
vects %>% tidyr::unnest_auto()
str(vects, list.len = 3)
str(vects, list.len = 1)
vects["Public"]
vects[1]
vects[[1]]
str(vects, list.len = 1)
vects["OPenSkiesStateVector"]
vects$Classes
flatten(vects)
getVectorSetListFeatures(vects)
getVectorSetListFeatures(q)
# Obtain a time series of state vectors for the aircraft with ICAO 24-bit
# address 403003 for the 8th of October, 2020 between 16:50 and 16:53 (London
# time), with a time resolution of 1 minute.
q<-getAircraftStateVectorsSeries("403003",
startTime = "2020-10-08 16:50:00",
endTime = "2020-10-08 16:52:00",
timeZone="Europe/London",
timeResolution=60) # this will return 3 records given start/end time
getVectorSetListFeatures(q)
q
getVectorSetListFeatures()
q2<-getVectorSetListFeatures(q)
q3<-getSingleTimeStateVectors(aircraft="403003", time="2020-10-08 16:59:00",
timeZone="Europe/London")
getVectorSetListFeatures(q3)
getVectorSetListFeatures(q)
5:536836836663
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
library(readxl);library(tidyverse);library(expss)
hs22 <- read_excel("Z:/EvaluationConsulting/Berks_IU/HeadStart/HS2021-22/data_and_analysis/HSneedsSurvey2022.xlsx")
expss::expss_output_viewer() # send output to viewer
temp<-hs22 %>% dplyr::select(starts_with("c_"))
x<-apply(temp, 1, function(x)  which(nchar(x)>1) )
# x[7] # note, some have multiple counties
x<-colSums(!is.na(temp)) # use this for response map
x<-as.data.frame(x)
colnames(x)[1]<-'numResponses'
x$county<-rownames(x)
x$county<-toupper(substr(x$county,3,22))
# make one column for county
temp2<-temp %>%
mutate_all(as.character) %>%
mutate(countyName = coalesce(!!! .)) %>%
dplyr::select(countyName, everything())
temp2<-temp2[ ,c("countyName")]
#htmlTable(fre(temp2$countyName))
hs22<-cbind(hs22,temp2)
library(RCurl) # the data are stored on the net
regions<-download.file(url="https://raw.githubusercontent.com/bac3917/Cauldron/master/Regions_b.csv",
destfile = "C:/temp/regions.csv")
regions<-read.csv('C:/temp/regions.csv')
hs22<-merge(hs22,regions,by="countyName")
fre(hs22$countyName )
mapdata<-hs22 %>% group_by(countyName) %>% summarise(n=n())
library(leaflet);library(rgdal)
setwd("Z:/GENERAL/GIS_Shapefiles/")
c<-readOGR(dsn = '.',layer='counties')
setwd("Z:/GENERAL/GIS_Shapefiles/")
c<-readOGR(dsn = '.',layer='counties')
c<-readOGR(dsn = '.',layer='counties_PA_NJ')
setwd("Z:/GENERAL/GIS_Shapefiles/")
c<-readOGR(dsn = '.',layer='counties_PA_NJ')
c$COUNTYNS
c$NAME
mapdata$countyName
c$NAME<-toupper(c$NAME)
c2<-merge(c,mapdata,by.x="NAME",by.y="countyName")
leaflet() %>%
addPolygons(data=c2,weight=.4)
c$STATEFP
c<-c[c$STATEFP=='42',]
c2<-merge(c,mapdata,by.x="NAME",by.y="countyName")
mypal<-colorFactor(palette = 'dark2',domain=c2$n)
leaflet() %>%
addPolygons(data=c2,weight=.4,
fillColor = ~mypal(c2$n))
mypal<-colorNumeric(palette = 'dark2',domain=c2$n)
leaflet() %>%
addPolygons(data=c2,weight=.4,
fillColor = ~mypal(c2$n))
leaflet() %>%
addPolygons(data=c2,weight=.4,
color = ~mypal(c2$n))
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n))
c2$n
mypal<-colorNumeric(palette = 'Blues',domain=c2$n)
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n))
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n)) %>% addLegend('bottomright',pal=mypal,values=~c2$n)
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n)) %>% addLegend('bottomright',pal=mypal,values=~$n)
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n)) %>% addLegend('bottomright',pal=mypal,values=~n)
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n))
m<-leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n))
m %>% addLegend('bottomright',pal=mypal,values=~$n)
leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(n))
m %>% addLegend('bottomright',pal=mypal,values=~n)
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n)
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n,opacity = 1)
fre(hs22$countyName )
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n,opacity = 1)
?addPolygons
m<-leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n), bringToFront=T)
m<-leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n), bringToTop())
m<-leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n) ) %>%
highlightOptions(bringToFront = T)
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n,opacity = 1)
m
m<-leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n) ) %>%
highlightOptions(bringToFront = T)
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n,opacity = 1)
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n,opacity = 1)
m<-leaflet() %>%
addPolygons(data=c2,weight=.4,smoothFactor = .2,fillOpacity = 1,
color = ~mypal(c2$n) )
m %>% addLegend(data=c2,'bottomright',pal=mypal,values=~n,opacity = 1)
rm(list=ls())
setwd('Z:/GENERAL/Data/PA_Data/PCCD/')
bcf()
library(haven);library(readxl)
library(codebook)
p19<-read_sav("//filesvr01/Research_and_Evaluation_Group/GENERAL/Data/PA_Data/PCCD/PAYS2019_gr681012_dis and honest.sav")
p19$aun_year<-paste0(p19$aun,"1920")
# there is no de-identified record key for these data!!
p19$rowid<-rownames(p19)
p19$rowid<-sprintf("%07s", p19$rowid) # add leading zeroes;string format
p19$respondent_id<-trimws(paste0(
p19$rowid,p19$aun_year))
p19$a13_<-factor(p19$a13,levels=c(1,2,3,4),labels=c("NO!","no","yes","YES!"))
p19$a13_<-factor(p19$a13,levels=c(1,2,3,4),labels=c("NO!","no","yes","YES!"))
f(p19$a13_)
fre(p19$a13_)
# read data dictionary from excel
library(readxl)
dd19d <- read_excel("DataDictionary2019_Detailed.xlsx")
dd19 <- read_excel("DataDictionary2019_VarsOnly.xlsx")
f(dd19$Topic)
library(sjlabelled) # vars without labels get set to 0!!!
myvars<-p19 %>% select(starts_with("f1")|starts_with("e6"))%>%colnames()
p19[myvars]<-lapply(p19[myvars],as_label)  # set labels for variables in list
# add descriptors to PAYS file
p19b<-merge(p19,leas1920,by.x="aun_year",by.y="STATE_LEA_ID9_YEAR_4",all.x=T)
