library(tidyverse)
ggplot(mpg,aes(hwy,wt))+geom_point()+theme_minimal()
ggplot(mpg,aes(hwy,displ))+geom_point()+theme_minimal()
knit_with_parameters("K:/bac/bBlog/PA_TeacherTurnover_052322.Rmd")
bcf()
# The most recent version of this file is run via a batchfile in C:\R\batchfiles\ECE
# A batch file named `ECE_Data_Refresh.bat` refers to _MostRecent
# TaskScheduler runs said batch file weekly
rm(list=ls())
bcf() #/BensConvenienceFunctions.R
library(RODBC);library(expss);library(tidyverse)
setwd("//FILESVR01/Research_and_Evaluation_Group/EvaluationConsulting/Ship_Statewide_ECE/data_and_analysis/dbase")
conn1 <- odbcConnect(dsn='ECE_PDO',uid='bcohen',pwd='data')
#ihe institution data
ihenames<-sqlFetch(conn1, "IHE_Descriptors")
empHx<-sqlFetch(conn1,"ParticipantEmploymentHistory")  # this has only updated reocrds data!!!!
empHx2<-empHx %>% group_by(FK_recordID) %>%
arrange(EmpHistory_NewStartDate) %>%
select(FK_recordID, EmpHistory_Timestamp, EmpHistory_FacilityID,EmpHistory_LocationID, EmpHistory_recordID,EmpHistory_EmployerName  )  %>%
summarise_all(first)
# Facilities data
facil<-sqlFetch(conn1, "ece_providers")  # this is the initial employer data!!!!
facil2<-facil %>% dplyr::select(PK_MasterProviderID,PK_MasterProviderLocationID, Facility_Name,
Facility_RegionAggr, Facility_Provider_Type,Facility_PAPre_KCounts,
Facility_STARLevel, Facility_CCW_Pct_from_OCDEL) %>%  # just need these vars
group_by(PK_MasterProviderID,PK_MasterProviderLocationID) %>%
summarise_all(first)
# Employment History is best source for latest employer name
empHx3<-merge(empHx2,facil2,by.x=c("EmpHistory_FacilityID","EmpHistory_LocationID"),by.y=c("PK_MasterProviderID","PK_MasterProviderLocationID"))
table(is.na(empHx3$EmpHistory_EmployerName))
# add program status info
progstatus<-sqlFetch(conn1,"ProgramStatus")
progst_aggr<-progstatus %>%
group_by(recordID) %>%
arrange(recordID,programStatus_Modified_timeStamp) %>%
summarise(programStatus_Modified_timeStamp=max(programStatus_Modified_timeStamp),
program_status=last(program_status))
progst_aggr$program_status<-ifelse(progst_aggr$program_status=="Credential Pending","Pending",progst_aggr$program_status)
# IHE attending data
ihehx<-sqlFetch(conn1, "IHE_Enroll_History")
ihenames<-ihenames %>% select(PK_UNITID,iheDescriptors_name,iheDescriptors_SECTOR2, iheDescriptors_OCDEL_provider_type)
ihehx<-left_join(ihehx,ihenames,by=c("IHE_Enrolled"="PK_UNITID"))
ihehx$IHE_Admit_Date<-as.Date(ihehx$IHE_Admit_Date,format="%Y-%m-%d")
# recode IHE names to OCDEKL's names
ihehx$IHE_degreePursued<-ifelse(ihehx$IHE_degreePursued!="AA" & ihehx$IHE_degreePursued!="BA/BS" &
ihehx$IHE_degreePursued!="CDA","Other",ihehx$IHE_degreePursued)
ihehx2<-ihehx %>%
#  dplyr::filter(!is.na(FK_recordID)) %>%   # if IHE but not date, no record! Kari D says indicates inactive status
arrange(desc(IHE_Admit_Date)) %>% # descending order gives most recent IHE at top
group_by(FK_recordID) %>%
summarise(IHE_UNITID=first(IHE_Enrolled),IHE_Name=first(iheDescriptors_name),
IHE_Admit_Date=first(IHE_Admit_Date),
IHE_SECTOR=first(iheDescriptors_SECTOR2),IHE_degreePursued=first(IHE_degreePursued),
IHE_degreeDetail=first(IHE_degreeDetail),
iheOCDEL_provider_type=first(iheDescriptors_OCDEL_provider_type),
IHE_history_modified_timestamp=max(IHE_history_modified_timestamp),numInsts=n())
#ferpa and attestation data
ferpa<-sqlFetch(conn1,"ferpaAttest")
ferpa2<- ferpa %>%  group_by(recordID) %>%
summarise(n=n(),
attestationDate=max(attestationDate),
ferpaDate=max(ferpaDate))
# courses
cc<-sqlFetch(conn1,"coursesCompleted")
cc$course_Aprtn<-ifelse(str_detect(cc$course_Aprtn,"Yes"),1,0)
# bring in course info and merge
cc2<-cc %>%
group_by(FK_recordID) %>%
summarise(modality=first(courseMode_ver2),   # updated modality data
apprenticeship=sum(course_Aprtn,na.rm=T),
numCompletedCourses=first(course_Sum_of_CompletedCourses),
)
freqModes<-cc %>%
dplyr::filter(!is.na(courseMode_ver2_recode)) %>%
pivot_longer(cols=courseMode_ver2_recode) %>%
group_by(FK_recordID,value) %>%
summarise(n=n(),mode=first(value)) %>%
group_by(FK_recordID,n)%>% summarise(mode2=first(mode)) %>%
dplyr::filter(n==max(n)) %>% select(-n) %>%
arrange(FK_recordID,mode2)
# Add column indicating most frequent modality across par's courses
cc2<-merge(cc2,freqModes)
cc2$MostFreqModality<-cc2$mode2
cc2$apprenticeship<-ifelse(cc2$apprenticeship>0,"Yes","No")
cc2$enroll_status<-"Enrolled"
# GET CURRENT APPLICATIONS
apps <- sqlFetch(conn1, "participants", rows_at_time=2) # apps table; set rows_at_time for larger datasets
apps$AppDate<- as.Date(apps$App_Date, format="%Y-%m-%d")
apps$appweek<-lubridate::week(apps$App_Date)
apps$App_ExitDate<- base::as.Date(apps$App_ExitDate, "%m/%d/%Y")
# remove variables not needed
apps<-apps %>% select(-contains("pattern") )
# app Modified date
apps$modDate2<-as.Date(apps$App_ModTimeStamp)
apps$appYear<-lubridate::year(apps$modDate2)
# Clean previous position entries
apps$App_PrevPosition_Type<-
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"NURS"),"Health",  ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"THERAPEU"),"Health",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"CASHIER"),"Retail or Food Service",  ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"FAST FOOD"),"Retail or Food Service",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"WAITRESS"),"Retail or Food Service",  ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"CUSTOMER SERICE"),"Retail or Food Service",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"RESTAURANT"),"Retail or Food Service",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"RETAIL"),"Retail or Food Service",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"BENEFITS"),"Other Business Position (e.g. clerical, administrative)",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"BABYSIT"),"Child Care (e.g. babysitting)",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"CHILDCARE"),"Child Care (e.g. babysitting)",  ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"TEACHER"),"Education",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"TEACHER"),"Education",  ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"EDUCATED"),"Education",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"DAY CARE"),"Education",  ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"DAYCARE"),"Education",
ifelse(str_detect(toupper(apps$App_PrevPosition_Description),"PARAPROFESSIONAL"),"Education",
"zOther"                         )))))))))))))))))
### MAKE SURE MERGES DO NOT DUPLICATE participant RECORDS!!!!
apps2<-merge(apps,ihehx2,by.x="PK_recordID", by.y="FK_recordID",all.x=T) # added all.x=T on 5-2-22
apps3<-merge(apps2,ferpa2,by.x="PK_recordID", by.y="recordID",all.x=T)  # make sure cases are not list! addsblanks?
apps4<-merge(apps3,facil2,
#by.x="PK_recordID",by.y="FK_recordID"
by.x=c("FK_MasterProviderID","FK_Location_ID"),
by.y=c("PK_MasterProviderID","PK_MasterProviderLocationID")
#by.y=c("EmpHistory_FacilityID","EmpHistory_LocationID")
,all.x=T)
# NOTE: left_join(A,B) will add rows from B if not matched in A; thus use `merge`
# days since modification
apps4$dayssince<-as.numeric(Sys.Date()-as.Date(apps4$App_ModTimeStamp))
apps4$App_Additional_Hours<-factor(x=apps4$App_Additional_Hours,
levels = c("I do not have another job", "Up to 10 additional hours",
"Between 11 and 20 additional hours",
"Between 21 and 30 additional hours","30 or more additional hours"))
apps4$App_ECE_Experience<-factor(apps4$App_ECE_Experience,
levels = c("Less than 6 months","6-12 months","Between 1 and 3 years",
"Between 3 and 5 years", "Between 5 and 10 years","More than 10 years"))
apps4$App_EmploySchedule2<-factor(apps4$App_EmploySchedule,
levels=c("Less than 25 hours a week",
"25-29","30-35","36-40","More than 40 hours"))
apps4$App_EmployDuration<-factor(apps4$App_EmployDuration,
levels=c('Less than 6 months','6-12 months',
'13-18 months',
'19-24 months','Between 2-3 years','Between 3-5 years',
'More than 5 years'))
apps4$App_AgeGroup<-factor(apps4$App_AgeGroup,
levels=c("18-25","26-29","30-35","36-40","More than 40 years","Decline to answer"),
ordered = T)
apps4$App_EmployWageRate<-factor(apps4$App_EmployWageRate, levels=c( "Under $10 per hour", "$10-12.99 per hour","$13-15.99 per hour","$16-18.99 per hour","$19 or more"))
# IHEs and degrees...
apps4$IHE_degreePursued2<-ifelse(apps4$IHE_degreePursued=="BA/BS","BA",apps4$IHE_degreePursued)
apps4$ApplPeriod<-ifelse(apps4$App_Date<=as.Date("2020-12-31"),"Applied Before 2021","Applied Later")
apps4$ApplPeriod2<-ifelse(apps4$App_Date<=as.Date("2020-05-30"),"By May 30, 2020",
ifelse(apps4$App_Date<=as.Date("2020-08-31"),"By Aug 31, 2020",
ifelse(apps4$App_Date<=as.Date("2020-12-31"),"By Dec 31, 2020",
ifelse(apps4$App_Date<=as.Date("2021-05-30"),"By May 30, 2021",
ifelse(apps4$App_Date<=as.Date("2021-08-31"),"By Aug 31, 2021",
ifelse(apps4$App_Date<=as.Date("2021-12-31"),"By Dec 31, 2021",
ifelse(apps4$App_Date<=as.Date("2022-05-30"),"By May 30, 2022",
ifelse(apps4$App_Date<=as.Date("2022-08-31"),"By Aug 31, 2022",
ifelse(apps4$App_Date<=as.Date("2022-12-31"),"By Dec 31, 2022",
"Other"
)))))))))
apps4$ApplPeriod2<-factor(apps4$ApplPeriod2,
levels=c("By May 30, 2020","By Aug 31, 2020","By Dec 31, 2020",
"By May 30, 2021","By Aug 31, 2021","By Dec 31, 2021",
"By May 30, 2022", "By Aug 31, 2022","By Dec 31, 2022"))
# THIS NEEDS TO BE `App_CDAcompleteCertificate`
apps4$App_CDAcompleteCertificate<-ifelse(!is.na(apps4$App_CDAcompleteCertificate),"CDA Completed","Not")
apps4$DegreeType2<-ifelse(apps4$App_Degree_Enrolled=="SAPC"|
apps4$App_Degree_Enrolled=="SITA"|
apps4$App_Degree_Enrolled=="SECA","SAPC SITA or SECA",apps4$App_Degree_Enrolled)
apps4$DegreeType3<-ifelse(apps4$DegreeType2=="AA"|apps4$DegreeType2=="BA/BS"|apps4$DegreeType2=="CDA",
apps4$DegreeType2, "Other")
# need new var to indicate number of months since application...
apps4$moSinceApp<-as.numeric( apps4$App_Date-Sys.Date())/30
apps4$Duration1<-ifelse(apps4$moSinceApp*-1>3,"More Than 3 Months","3 or Fewer Months in PDO")
apps4$AppRaceRecode<-ifelse(nchar(apps4$App_Race)>25,"More Than 1 Race",apps$App_Race)
apps4$App_EmployPosition2<-
ifelse(apps4$App_EmployPosition!="Lead Teacher" | apps4$App_EmployPosition!="Assistant Teacher",
ifelse(str_detect(toupper(apps4$App_EmployPosition),"CHILD CARE SUPPORT"),"Assistant Teacher",
ifelse(str_detect(toupper(apps4$App_EmployPosition),"OWNER"),"Owner",
ifelse(str_detect(toupper(apps4$App_EmployPosition),"CHILDCARE"),"Assistant Teacher",
ifelse(str_detect(toupper(apps4$App_EmployPosition),"COORDINATOR"),"Director or Other Administrator",
ifelse(str_detect(toupper(apps4$App_EmployPosition),"DIRECTOR"),"Director or Other Administrator",
apps4$App_EmployPosition))))),
NA)
apps4$App_CCWpct<-ifelse(apps4$App_CCWpct=="Not applicable",NA,apps4$App_CCWpct)
apps4$App_CCWpct<-factor(apps4$App_CCWpct,levels=c("Under 10%","10-29%", "30-49%","50% or more") )
apps4$todaysdate<-Sys.Date()
apps5<-merge(apps4,progst_aggr,by.x="PK_recordID", by.y="recordID", all.x=T)
# ======  OCDEL's requested "raw data"
# use latest text value of IHE from IHE_HX table
apps5$cda_inst<-ifelse(apps5$IHE_degreePursued=="CDA",apps5$IHE_Name,NA)    ### need to grab most recent IHE from IHEhx
apps5$cda_Type<- ifelse(apps5$IHE_degreePursued=="CDA" & !is.na(apps5$App_IHE_Enrolled),
gsub('[[:punct:] ]+',' ',
paste( stringr::word(apps5$IHE_SECTOR,1,1),"University" )),NA)
apps5$aa_inst<-ifelse(apps5$IHE_degreePursued=="AA",apps5$IHE_Name,NA)     ### need to grab most recent IHE from IHEhx
apps5$aa_Type<-ifelse(apps5$IHE_degreePursued=="AA" & !is.na(apps5$App_IHE_Enrolled),
gsub('[[:punct:] ]+',' ',
paste( stringr::word(apps5$IHE_SECTOR,1,1),"University" )),NA)
apps5$ba_inst<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$IHE_Name,NA) ### need to grab most recent IHE from IHEhx
apps5$ba_Type<-ifelse(apps5$IHE_degreePursued=="BA/BS" & !is.na(apps5$App_IHE_Enrolled),
gsub('[[:punct:] ]+',' ',
paste( stringr::word(apps5$IHE_SECTOR,1,1),"University" )),NA)
apps5$other_inst<-ifelse(apps5$IHE_degreePursued=="Other",apps5$IHE_Name,NA) ### need to grab most recent IHE from IHEhx
apps5$other_Type<-ifelse(apps5$IHE_degreePursued=="Other" & !is.na(apps5$App_IHE_Enrolled),
gsub('[[:punct:] ]+',' ',
paste( stringr::word(apps5$IHE_SECTOR,1,1),"University" )),NA)
apps5$prioritization<-"Unknown"  # rando OCDEL variable
apps5<-left_join(apps5,cc2,by=c("PK_recordID"="FK_recordID"))
# Linda Boring has an AA in progress AND a CDA completed; both must be included in report
# no CDA cert date bc she hasn't been observed yet; CDA is pending;
# OCDEL wants to know about CDA less 'observation' or completed
apps5$cda_enroll_date<-ifelse(apps5$IHE_degreePursued=="CDA",apps5$IHE_Admit_Date ,NA)
apps5$cda_enroll_date<-as.Date(apps5$cda_enroll_date) # IHE_Admit_Date
apps5$cda_detail<-ifelse(apps5$IHE_degreePursued=="CDA",apps5$IHE_degreeDetail ,"No CDA")  #################
apps5$cda_degree_status<-ifelse(apps5$IHE_degreePursued=="CDA",apps5$program_status,NA)
# or IHEhx has a degree
# if date admitted is valid, then show degree on raw data file
# for CDA certificate specifically, must have valid CDAcompleteCertificate value
# pending if not certificate completion date
# Also Samantha	Stadler completed AA and then started her BA
apps5$cda_enroll_status<-ifelse(apps5$IHE_degreePursued=="CDA",apps5$IHE_degreePursued,"No CDA")
apps5$cda_modality<-ifelse( apps5$IHE_degreePursued=="CDA",apps5$MostFreqModality  ,"No CDA")
apps5$cda_provider_type<-ifelse(apps5$IHE_degreePursued=="CDA",apps5$iheOCDEL_provider_type,NA)  # new in FEB 2022
apps5$aa_enroll_date<-ifelse(apps5$IHE_degreePursued=="AA",apps5$IHE_Admit_Date ,NA)
apps5$aa_enroll_date<-as.Date(apps5$aa_enroll_date)
apps5$aa_detail<-ifelse(apps5$IHE_degreePursued=="AA",apps5$IHE_degreeDetail ,"No AA")
apps5$aa_degree_status<-ifelse(apps5$IHE_degreePursued=="AA",apps5$program_status,NA)
apps5$aa_enroll_status<-ifelse(apps5$IHE_degreePursued=="AA",apps5$IHE_degreePursued,"No AA")
apps5$aa_modality<-ifelse(apps5$IHE_degreePursued=="AA",apps5$MostFreqModality  ,"No AA")   # might need update to new modality field?
apps5$aa_provider_type<-ifelse(apps5$IHE_degreePursued=="AA",apps5$iheOCDEL_provider_type,NA)  # new in FEB 2022
apps5$ba_enroll_date<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$IHE_Admit_Date ,NA)
apps5$ba_enroll_date<-as.Date(apps5$ba_enroll_date)
apps5$ba_detail<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$IHE_degreeDetail ,"No BA")
apps5$ba_degree_status<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$program_status,NA)
apps5$ba_enroll_status<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$IHE_degreePursued,"No BA")
apps5$ba_modality<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$MostFreqModality  ,"No BA")
apps5$ba_provider_type<-ifelse(apps5$IHE_degreePursued=="BA/BS",apps5$iheOCDEL_provider_type,NA)  # new in FEB 2022
apps5$other_enroll_date<-ifelse(apps5$IHE_degreePursued=="Other",apps5$IHE_Admit_Date ,NA)
apps5$other_enroll_date<-as.Date(apps5$other_enroll_date)
apps5$other_detail<-ifelse(apps5$IHE_degreePursued=="Other",apps5$IHE_degreeDetail ,"No Other")
apps5$other_degree_status<-ifelse(apps5$IHE_degreePursued=="Other",apps5$program_status,NA)
apps5$other_enroll_status<-ifelse(apps5$IHE_degreePursued=="Other",apps5$IHE_degreePursued,"No Other")
apps5$other_modality<-ifelse(apps5$IHE_degreePursued=="Other",apps5$MostFreqModality  ,"No Other")
apps5$other_provider_type<-ifelse(apps5$IHE_degreePursued=="Other",apps5$iheOCDEL_provider_type,NA)  # new in FEB 2022
# there may be course takers without IHE_Admit_date
table(is.na(apps5$IHE_Admit_Date),is.na(apps5$IHE_degreePursued))
f(apps5$cda_degree_status)
# Participant Demographic
#Licensed Child Care Center Director
#Licensed Child Care Center Teacher
#Licensed Child Care Center Directors who serve CCW children
#Licensed Child Care Center Teachers who serve CCW children
#Licensed Family Child Care Providers
#Licensed Grp Center
apps5$ParticipantDemographic_FEB22v2<-
ifelse(
str_detect(apps5$App_EmployPosition2,"Director") |
str_detect(apps5$App_EmployPosition2,"Owner"),"Licensed Child Care Center Director",
ifelse(str_detect(apps5$App_EmployPosition2,"Teacher"),"Licensed Child Care Center Teacher",
ifelse(apps5$Facility_Provider_Type=="Family Child Care Home","Licensed Family Child Care Providers",
ifelse(apps5$Facility_Provider_Type=="Group Child Care Home","Licensed Grp Center",
"Licensed Child Care Center Teacher"))))
# "Employment Demographic"
apps5$EmploymentDemographic<-ifelse(is.na(apps5$Facility_Provider_Type),NA,  # blank if missing position
ifelse(apps5$Facility_Provider_Type=="Family Child Care Home","Licensed Family Child Care",
ifelse(apps5$Facility_Provider_Type=="Group Child Care Home","Licensed Group Child Care",
ifelse(apps5$Facility_Provider_Type=="Child Care Center","Licensed Center-based Programs",
ifelse(apps5$Facility_PAPre_KCounts=="Yes","Pre-K Counts",
NA)))))
# set of records without EmploymentDemographic
tt<-apps5 %>% dplyr::filter(is.na(EmploymentDemographic)) %>% select(PK_recordID)
apps5$App_CCW_NewCateg2<-ifelse(apps5$App_CCW_NewCateg=="15","0-15",
ifelse(apps5$App_CCW_NewCateg=="1630","16-30",
ifelse(apps5$App_CCW_NewCateg=="3145","31-45",
ifelse(apps5$App_CCW_NewCateg=="4660","46-60",
ifelse(apps5$App_CCW_NewCateg=="6175","61-75","76-100")))))
apps5$STAR_Movement	<-apps5$STARmovement_Manual
apps5$ELRCregion2<-paste0("ELRC ",apps5$ELRCregion)
apps5$PrimaryAgeGroup<-
ifelse(str_detect(apps5$App_FacilAgesServeCheck,"Infant"),"0-3 Infant Toddler",
ifelse(str_detect(apps5$App_FacilAgesServeCheck,"Presch"),"3-5 Preschool",
ifelse(apps5$App_FacilAgesServeCheck=="School-aged","5-12 school Age","Mixed Age Group")))
apps5=apply_labels(apps5,
EmploymentDemographic="Employment Demographic", ParticipantDemographic_FEB22="Participant Demographic",
PrimaryAgeGroup="Center Age Group")
apps5$cda_enroll_date = as.Date(apps5$cda_enroll_date,format="%Y-%m-%d")
apps5$ba_enroll_date = as.Date(apps5$ba_enroll_date,format="%Y-%m-%d")
apps5$App_eligible<-ifelse(is.na(apps5$App_eligible),"Missing",apps5$App_eligible)
# prepare raw extract file
# kelley says this extract should be for anyone ever taking a course (even if exited program)
# must complete at least one course
apps6<-apps5[!is.na(apps$CourseCount),]
temp <- apps6 %>%
#  dplyr::filter(numCompletedCourses>=1) %>%
##  1-27-2022 Kelley says remove all who haven't taken course
dplyr::select(App_FullName,PK_recordID,App_Fname,App_Lname,
ParticipantDemographic_FEB22v2,
PrimaryAgeGroup,App_Race_Recode,App_HispEth,
EmploymentDemographic,
#program_status,  # latest program_status from program_status table
Facility_Name,
Facility_STARLevel, STAR_Movement,Facility_STARLevel,
App_CCW_NewCateg,
ELRCregion2, # what follows are credenData
# what follows are credenData
cda_inst,    # most current enrollment
cda_degree_status,
cda_detail, cda_provider_type,cda_modality, cda_enroll_date,
cda_enroll_status, App_CDAcompleteCertificate,
aa_inst, aa_degree_status, aa_detail, aa_provider_type,aa_modality, aa_enroll_date,
aa_enroll_status, App_AAcomplete,
ba_inst, ba_degree_status, ba_detail, ba_provider_type,ba_modality, ba_enroll_date,
ba_enroll_status, App_BAcomplete,
other_inst, other_degree_status, other_detail, other_provider_type,other_modality, other_enroll_date,
other_enroll_status, App_OTHERcomplete,
apprenticeship
)
rm(cc,facil,ferpa,freqModes,ihehx,progstatus,ihenames)
# text/examine
#temp %>% dplyr::filter(App_Fname=="Edith") %>% select(PK_recordID,cda_inst,cda_enroll_date,Facility_Name)
#temp %>% dplyr::filter(PK_recordID==24) %>%
#  select(PK_recordID,App_Lname,EmploymentDemographic,  cda_inst,cda_enroll_date,cda_provider_type)
# save variously
write.csv( temp, "//FILESVR01/Research_and_Evaluation_Group/EvaluationConsulting/Ship_Statewide_ECE/data_and_analysis/dbase/OCDELraw.csv", row.names = FALSE )
write.csv(temp, "Q:/OCDELraw.csv" ,row.names = F)
# NOTE:  apps5 include non-course completers
saveRDS(apps5,paste0("//FILESVR01/Research_and_Evaluation_Group/EvaluationConsulting/Ship_Statewide_ECE/data_and_analysis/dbase/data_backups/shipPDO_",Sys.Date(),".rds"))
saveRDS(apps5,"//FILESVR01/Research_and_Evaluation_Group/EvaluationConsulting/Ship_Statewide_ECE/data_and_analysis/dbase/data_backups/shipPDO_latest.rds")
